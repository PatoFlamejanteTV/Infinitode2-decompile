/*      */ package com.b.a.c;
/*      */ 
/*      */ import com.a.a.a.am;
/*      */ import com.b.a.b.a;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ class d
/*      */ {
/*      */   private static boolean a(int paramInt) {
/* 1027 */     return ((1 << paramInt & 0x1C0) != 0);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static String b(String paramString, int paramInt) {
/*      */     StringBuffer stringBuffer2;
/*      */     StringBuilder stringBuilder;
/* 1044 */     switch (paramInt & 0xA) {
/*      */       
/*      */       case 0:
/* 1047 */         return paramString;
/*      */       
/*      */       case 2:
/* 1050 */         stringBuffer2 = new StringBuffer(paramString.length());
/*      */ 
/*      */         
/* 1053 */         i = 0;
/*      */ 
/*      */         
/*      */         while (true) {
/* 1057 */           int j = am.a(paramString, i);
/* 1058 */           i += am.a(j);
/* 1059 */           am.a(stringBuffer2, a.c(j));
/* 1060 */           if (i >= paramString.length())
/* 1061 */             return stringBuffer2.toString(); 
/*      */         } 
/*      */       case 8:
/* 1064 */         stringBuilder = new StringBuilder(paramString.length());
/*      */ 
/*      */         
/* 1067 */         i = 0;
/*      */         
/*      */         while (true) {
/*      */           char c;
/* 1071 */           if (!c.a(c = paramString.charAt(i++))) {
/* 1072 */             stringBuilder.append(c);
/*      */           }
/* 1074 */           if (i >= paramString.length())
/* 1075 */             return stringBuilder.toString(); 
/*      */         } 
/*      */     } 
/* 1078 */     StringBuffer stringBuffer1 = new StringBuffer(paramString.length());
/*      */ 
/*      */     
/* 1081 */     int i = 0;
/*      */     
/*      */     while (true) {
/* 1084 */       int j = am.a(paramString, i);
/* 1085 */       i += am.a(j);
/* 1086 */       if (!c.a(j)) {
/* 1087 */         am.a(stringBuffer1, a.c(j));
/*      */       }
/* 1089 */       if (i >= paramString.length()) {
/* 1090 */         return stringBuffer1.toString();
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private static String a(char[] paramArrayOfchar, int paramInt1, int paramInt2, int paramInt3) {
/* 1098 */     return b(new String(paramArrayOfchar, paramInt1, paramInt2 - paramInt1), paramInt3);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static String a(String paramString, int paramInt) {
/* 1120 */     StringBuffer stringBuffer = new StringBuffer(paramString.length());
/*      */ 
/*      */     
/* 1123 */     switch (paramInt & 0xB)
/*      */     
/*      */     { 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       case 0:
/* 1138 */         i = paramString.length();
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*      */         do {
/* 1144 */           int j = i;
/*      */ 
/*      */           
/* 1147 */           i -= am.a(am.a(paramString, i - 1));
/*      */ 
/*      */ 
/*      */           
/* 1151 */           stringBuffer.append(paramString.substring(i, j));
/* 1152 */         } while (i > 0);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 1230 */         return stringBuffer.toString();case 1: i = paramString.length(); do { int j, k = i; do { j = am.a(paramString, i - 1); } while ((i = i - am.a(j)) > 0 && a(a.a(j))); stringBuffer.append(paramString.substring(i, k)); } while (i > 0); return stringBuffer.toString(); }  int i = paramString.length(); do { int j = i; int k = am.a(paramString, i - 1); i -= am.a(k); if ((paramInt & 0x1) != 0) while (i > 0 && a(a.a(k))) { k = am.a(paramString, i - 1); i -= am.a(k); }   if ((paramInt & 0x8) != 0 && c.a(k)) continue;  int m = i; if ((paramInt & 0x2) != 0) { k = a.c(k); am.a(stringBuffer, k); m += am.a(k); }  stringBuffer.append(paramString.substring(m, j)); } while (i > 0); return stringBuffer.toString();
/*      */   }
/*      */ 
/*      */   
/*      */   private static String b(char[] paramArrayOfchar, int paramInt1, int paramInt2, int paramInt3) {
/* 1235 */     return a(new String(paramArrayOfchar, paramInt1, paramInt2 - paramInt1), paramInt3);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static String a(c paramc, int paramInt) {
/* 1242 */     char[] arrayOfChar = paramc.a;
/* 1243 */     int i = paramc.b();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1249 */     if ((paramc.g & 0x1) != 0)
/*      */     {
/* 1251 */       paramInt = (paramInt = paramInt | 0x4) & 0xFFFFFFF7;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1257 */     if ((paramc.g & 0x2) != 0)
/*      */     {
/* 1259 */       paramInt = (paramInt = paramInt | 0x8) & 0xFFFFFFFB;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1265 */     if (paramc.f != 4 && paramc.f != 5 && paramc.f != 6 && paramc.f != 3)
/*      */     {
/*      */ 
/*      */       
/* 1269 */       paramInt &= 0xFFFFFFFB;
/*      */     }
/* 1271 */     StringBuilder stringBuilder = new StringBuilder(((paramInt & 0x4) != 0) ? (paramc.b << 1) : paramc.b);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1282 */     if ((paramInt & 0x10) == 0) {
/*      */       
/* 1284 */       if ((paramInt & 0x4) == 0) {
/*      */         
/* 1286 */         for (byte b = 0; b < i; b++) {
/*      */           f f;
/* 1288 */           if ((f = paramc.c(b)).c()) {
/* 1289 */             stringBuilder.append(a(arrayOfChar, f.a, f.b, paramInt & 0xFFFFFFFD));
/*      */           }
/*      */           else {
/*      */             
/* 1293 */             stringBuilder.append(b(arrayOfChar, f.a, f.b, paramInt));
/*      */           }
/*      */         
/*      */         } 
/*      */       } else {
/*      */         
/* 1299 */         byte[] arrayOfByte = paramc.d;
/*      */ 
/*      */ 
/*      */         
/* 1303 */         for (byte b = 0; b < i; b++) {
/* 1304 */           f f = paramc.c(b);
/*      */           
/*      */           int j;
/*      */           
/* 1308 */           if ((j = (paramc.m[b]).c) < 0) {
/* 1309 */             j = 0;
/*      */           }
/* 1311 */           if (f.c()) {
/* 1312 */             char c1; if (paramc.a() && arrayOfByte[f.a] != 0)
/*      */             {
/* 1314 */               j |= 0x1;
/*      */             }
/* 1316 */             if ((j & 0x1) != 0) {
/* 1317 */               c1 = '‎';
/* 1318 */             } else if ((j & 0x4) != 0) {
/* 1319 */               c1 = '‏';
/*      */             } else {
/* 1321 */               c1 = Character.MIN_VALUE;
/*      */             } 
/* 1323 */             if (c1) {
/* 1324 */               stringBuilder.append(c1);
/*      */             }
/* 1326 */             stringBuilder.append(a(arrayOfChar, f.a, f.b, paramInt & 0xFFFFFFFD));
/*      */ 
/*      */ 
/*      */             
/* 1330 */             if (paramc.a() && arrayOfByte[f.b - 1] != 0)
/*      */             {
/* 1332 */               j |= 0x2;
/*      */             }
/* 1334 */             if ((j & 0x2) != 0) {
/* 1335 */               c1 = '‎';
/* 1336 */             } else if ((j & 0x8) != 0) {
/* 1337 */               c1 = '‏';
/*      */             } else {
/* 1339 */               c1 = Character.MIN_VALUE;
/*      */             } 
/* 1341 */             if (c1 != '\000')
/* 1342 */               stringBuilder.append(c1); 
/*      */           } else {
/*      */             char c1;
/* 1345 */             if (paramc.a() && 
/* 1346 */               !paramc.a(8194, f.b - 1))
/*      */             {
/* 1348 */               j |= 0x4;
/*      */             }
/* 1350 */             if ((j & 0x1) != 0) {
/* 1351 */               c1 = '‎';
/* 1352 */             } else if ((j & 0x4) != 0) {
/* 1353 */               c1 = '‏';
/*      */             } else {
/* 1355 */               c1 = Character.MIN_VALUE;
/*      */             } 
/* 1357 */             if (c1) {
/* 1358 */               stringBuilder.append(c1);
/*      */             }
/* 1360 */             stringBuilder.append(b(arrayOfChar, f.a, f.b, paramInt));
/*      */ 
/*      */             
/* 1363 */             if (paramc.a() && (0x2002 & 
/* 1364 */               c.a(arrayOfByte[f.a])) == 0) {
/* 1365 */               j |= 0x8;
/*      */             }
/* 1367 */             if ((j & 0x2) != 0) {
/* 1368 */               c1 = '‎';
/* 1369 */             } else if ((j & 0x8) != 0) {
/* 1370 */               c1 = '‏';
/*      */             } else {
/* 1372 */               c1 = Character.MIN_VALUE;
/*      */             } 
/* 1374 */             if (c1 != '\000') {
/* 1375 */               stringBuilder.append(c1);
/*      */             }
/*      */           }
/*      */         
/*      */         }
/*      */       
/*      */       } 
/* 1382 */     } else if ((paramInt & 0x4) == 0) {
/*      */       
/* 1384 */       for (int j = i; --j >= 0; ) {
/*      */         f f;
/* 1386 */         if ((f = paramc.c(j)).c()) {
/* 1387 */           stringBuilder.append(b(arrayOfChar, f.a, f.b, paramInt & 0xFFFFFFFD));
/*      */           
/*      */           continue;
/*      */         } 
/* 1391 */         stringBuilder.append(a(arrayOfChar, f.a, f.b, paramInt));
/*      */       
/*      */       }
/*      */     
/*      */     }
/*      */     else {
/*      */       
/* 1398 */       byte[] arrayOfByte = paramc.d;
/*      */       
/* 1400 */       for (int j = i; --j >= 0; ) {
/*      */         f f;
/*      */         
/* 1403 */         if ((f = paramc.c(j)).c()) {
/* 1404 */           if (arrayOfByte[f.b - 1] != 0) {
/* 1405 */             stringBuilder.append('‎');
/*      */           }
/*      */           
/* 1408 */           stringBuilder.append(b(arrayOfChar, f.a, f.b, paramInt & 0xFFFFFFFD));
/*      */ 
/*      */           
/* 1411 */           if (arrayOfByte[f.a] != 0)
/* 1412 */             stringBuilder.append('‎'); 
/*      */           continue;
/*      */         } 
/* 1415 */         if ((0x2002 & c.a(arrayOfByte[f.a])) == 0) {
/* 1416 */           stringBuilder.append('‏');
/*      */         }
/*      */         
/* 1419 */         stringBuilder.append(a(arrayOfChar, f.a, f.b, paramInt));
/*      */ 
/*      */         
/* 1422 */         if ((0x2002 & c.a(arrayOfByte[f.b - 1])) == 0) {
/* 1423 */           stringBuilder.append('‏');
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/* 1430 */     return stringBuilder.toString();
/*      */   }
/*      */ }


/* Location:              C:\Program Files (x86)\Steam\steamapps\common\Infinitode 2\infinitode-2.jar!\com\b\a\c\d.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */