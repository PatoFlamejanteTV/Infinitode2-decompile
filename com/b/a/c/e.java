/*      */ package com.b.a.c;
/*      */ 
/*      */ import java.util.Arrays;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ final class e
/*      */ {
/*      */   static byte[] a(c paramc) {
/*  251 */     int i = paramc.j;
/*  252 */     int j = paramc.b;
/*      */     
/*  254 */     if (i != j) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  265 */       Arrays.fill(paramc.e, i, j, paramc.h);
/*      */ 
/*      */       
/*  268 */       paramc.j = j;
/*      */     } 
/*  270 */     if (j < paramc.e.length) {
/*  271 */       byte[] arrayOfByte = new byte[j];
/*  272 */       System.arraycopy(paramc.e, 0, arrayOfByte, 0, j);
/*  273 */       return arrayOfByte;
/*      */     } 
/*  275 */     return paramc.e;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static f a(c paramc, int paramInt) {
/*  306 */     int i, j = (paramc.m[paramInt]).a;
/*      */     
/*  308 */     byte b = (paramc.m[paramInt]).d;
/*      */     
/*  310 */     if (paramInt > 0) {
/*  311 */       i = j + (paramc.m[paramInt]).b - (paramc.m[paramInt - 1]).b;
/*      */     }
/*      */     else {
/*      */       
/*  315 */       i = j + (i.m[0]).b;
/*      */     } 
/*  317 */     return new f(j, i, b);
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private static void a(c paramc, byte paramByte) {
/*  323 */     paramc.m = paramc.n;
/*  324 */     paramc.k = 1;
/*      */ 
/*      */     
/*  327 */     paramc.m[0] = new f(0, paramc.b, paramByte);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void a(c paramc, byte paramByte1, byte paramByte2) {
/*  366 */     if (paramByte2 <= (paramByte1 | 0x1)) {
/*      */       return;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  380 */     paramByte1 = (byte)(paramByte1 + 1);
/*      */     
/*  382 */     f[] arrayOfF = paramc.m;
/*  383 */     byte[] arrayOfByte = paramc.e;
/*  384 */     int i = paramc.k;
/*      */ 
/*      */     
/*  387 */     if (paramc.j < paramc.b) {
/*  388 */       i--;
/*      */     }
/*      */     
/*  391 */     label38: while ((paramByte2 = (byte)(paramByte2 - 1)) >= paramByte1) {
/*  392 */       int j = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       while (true) {
/*  398 */         if (j < i && arrayOfByte[(arrayOfF[j]).a] < paramByte2) {
/*  399 */           j++; continue;
/*      */         } 
/*  401 */         if (j < i) {
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  406 */           int m = j; do {  } while (++m < i && arrayOfByte[(arrayOfF[m]).a] >= paramByte2);
/*      */ 
/*      */ 
/*      */           
/*  410 */           int k = m - 1;
/*  411 */           while (j < k) {
/*  412 */             f f = arrayOfF[j];
/*  413 */             arrayOfF[j] = arrayOfF[k];
/*  414 */             arrayOfF[k] = f;
/*  415 */             j++;
/*  416 */             k--;
/*      */           } 
/*      */           
/*  419 */           if (m != i) {
/*      */ 
/*      */             
/*  422 */             j = m + 1; continue;
/*      */           }  continue label38;
/*      */         } 
/*      */         continue label38;
/*      */       } 
/*      */     } 
/*  428 */     if ((paramByte1 & 0x1) == 0) {
/*  429 */       byte b = 0;
/*      */ 
/*      */       
/*  432 */       if (paramc.j == paramc.b) {
/*  433 */         i--;
/*      */       }
/*      */ 
/*      */       
/*  437 */       while (b < i) {
/*  438 */         f f = arrayOfF[b];
/*  439 */         arrayOfF[b] = arrayOfF[i];
/*  440 */         arrayOfF[i] = f;
/*  441 */         b++;
/*  442 */         i--;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private static int b(c paramc, int paramInt) {
/*  450 */     f[] arrayOfF = paramc.m;
/*  451 */     int i = paramc.k, j = 0;
/*      */     
/*  453 */     for (byte b = 0; b < i; b++) {
/*  454 */       int k = (arrayOfF[b]).b - j;
/*  455 */       int m = (arrayOfF[b]).a;
/*  456 */       if (paramInt >= m && paramInt < m + k) {
/*  457 */         return b;
/*      */       }
/*  459 */       j += k;
/*      */     } 
/*      */ 
/*      */     
/*  463 */     throw new IllegalStateException("Internal ICU error in getRunFromLogicalIndex");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static void b(c paramc) {
/*  483 */     if (paramc.k >= 0) {
/*      */       return;
/*      */     }
/*  486 */     if (paramc.i != 2) {
/*      */ 
/*      */       
/*  489 */       a(paramc, paramc.h);
/*      */     } else {
/*      */       
/*  492 */       int i = paramc.b;
/*  493 */       byte[] arrayOfByte = paramc.e;
/*      */       
/*  495 */       byte b = -1;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  507 */       int j = paramc.j;
/*      */       
/*  509 */       byte b2 = 0; byte b1;
/*  510 */       for (b1 = 0; b1 < j; b1++) {
/*      */         
/*  512 */         if (arrayOfByte[b1] != b) {
/*  513 */           b2++;
/*  514 */           b = arrayOfByte[b1];
/*      */         } 
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  522 */       if (b2 == 1 && j == i) {
/*      */         
/*  524 */         a(paramc, arrayOfByte[0]);
/*      */       
/*      */       }
/*      */       else {
/*      */         
/*  529 */         byte b4 = 126;
/*  530 */         byte b5 = 0;
/*      */ 
/*      */         
/*  533 */         if (j < i) {
/*  534 */           b2++;
/*      */         }
/*      */ 
/*      */         
/*  538 */         paramc.b(b2);
/*  539 */         f[] arrayOfF = paramc.l;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  547 */         byte b3 = 0;
/*      */ 
/*      */         
/*  550 */         b1 = 0;
/*      */         
/*      */         do {
/*  553 */           byte b6 = b1;
/*      */           
/*  555 */           if ((b = arrayOfByte[b1]) < b4) {
/*  556 */             b4 = b;
/*      */           }
/*  558 */           if (b > b5) {
/*  559 */             b5 = b;
/*      */           }
/*      */           do {
/*      */           
/*  563 */           } while (++b1 < j && arrayOfByte[b1] == b);
/*      */ 
/*      */           
/*  566 */           arrayOfF[b3] = new f(b6, b1 - b6, b);
/*  567 */           b3++;
/*  568 */         } while (b1 < j);
/*      */         
/*  570 */         if (j < i) {
/*      */           
/*  572 */           arrayOfF[b3] = new f(j, i - j, paramc.h);
/*      */ 
/*      */           
/*  575 */           if (paramc.h < b4) {
/*  576 */             b4 = paramc.h;
/*      */           }
/*      */         } 
/*      */ 
/*      */         
/*  581 */         paramc.m = arrayOfF;
/*  582 */         paramc.k = b2;
/*      */         
/*  584 */         a(paramc, b4, b5);
/*      */ 
/*      */ 
/*      */         
/*  588 */         j = 0;
/*  589 */         for (b1 = 0; b1 < b2; b1++) {
/*  590 */           (arrayOfF[b1]).d = arrayOfByte[(arrayOfF[b1]).a];
/*  591 */           j = (arrayOfF[b1]).b += j;
/*      */         } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  598 */         if (b3 < b2) {
/*  599 */           i = ((paramc.h & 0x1) != 0) ? 0 : b3;
/*  600 */           (arrayOfF[i]).d = paramc.h;
/*      */         } 
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  606 */     if (paramc.o.a > 0)
/*      */     {
/*      */       
/*  609 */       for (byte b = 0; b < paramc.o.a; b++) {
/*  610 */         c.h h = paramc.o.c[b];
/*  611 */         int i = b(paramc, h.a);
/*  612 */         (paramc.m[i]).c |= h.b;
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*  617 */     if (paramc.p > 0)
/*      */     {
/*      */       
/*  620 */       for (byte b = 0; b < paramc.b; b++) {
/*      */         char c1;
/*  622 */         if (c.a(c1 = paramc.a[b])) {
/*  623 */           int i = b(paramc, b);
/*  624 */           (paramc.m[i]).c--;
/*      */         } 
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static int[] c(c paramc) {
/* 1111 */     f[] arrayOfF = paramc.m;
/*      */ 
/*      */ 
/*      */     
/* 1115 */     int j, arrayOfInt1[] = new int[j = (paramc.b > paramc.c) ? paramc.b : paramc.c];
/*      */     
/* 1117 */     int i = 0;
/* 1118 */     int k = 0; int m;
/* 1119 */     for (m = 0; m < paramc.k; m++) {
/* 1120 */       int n = (arrayOfF[m]).a;
/* 1121 */       int i1 = (arrayOfF[m]).b;
/* 1122 */       if (arrayOfF[m].c()) {
/*      */         do {
/* 1124 */           arrayOfInt1[k++] = n++;
/* 1125 */         } while (++i < i1);
/*      */       } else {
/* 1127 */         n += i1 - i;
/*      */         do {
/* 1129 */           arrayOfInt1[k++] = --n;
/* 1130 */         } while (++i < i1);
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/* 1135 */     if (paramc.o.a > 0) {
/* 1136 */       m = 0; int n = paramc.k;
/*      */       
/* 1138 */       arrayOfF = paramc.m;
/*      */       
/* 1140 */       for (k = 0; k < n; k++) {
/*      */         int i2;
/* 1142 */         if (((i2 = (arrayOfF[k]).c) & 0x5) > 0) {
/* 1143 */           m++;
/*      */         }
/* 1145 */         if ((i2 & 0xA) > 0) {
/* 1146 */           m++;
/*      */         }
/*      */       } 
/*      */       
/* 1150 */       int i1 = paramc.c;
/* 1151 */       for (k = n - 1; k >= 0 && m > 0; k--) {
/*      */         int i2;
/* 1153 */         if (((i2 = (arrayOfF[k]).c) & 0xA) > 0) {
/* 1154 */           arrayOfInt1[--i1] = -1;
/* 1155 */           m--;
/*      */         } 
/* 1157 */         i = (k > 0) ? (arrayOfF[k - 1]).b : 0;
/* 1158 */         for (int i3 = (arrayOfF[k]).b - 1; i3 >= i && m > 0; i3--) {
/* 1159 */           arrayOfInt1[--i1] = arrayOfInt1[i3];
/*      */         }
/* 1161 */         if ((i2 & 0x5) > 0) {
/* 1162 */           arrayOfInt1[--i1] = -1;
/* 1163 */           m--;
/*      */         }
/*      */       
/*      */       } 
/* 1167 */     } else if (paramc.p > 0) {
/* 1168 */       m = paramc.k;
/*      */ 
/*      */ 
/*      */       
/* 1172 */       arrayOfF = paramc.m;
/* 1173 */       i = 0;
/*      */       
/* 1175 */       int n = 0;
/* 1176 */       for (byte b = 0; b < m; b++, i += k) {
/* 1177 */         k = (arrayOfF[b]).b - i;
/*      */         
/*      */         int i1;
/* 1180 */         if ((i1 = (arrayOfF[b]).c) == 0 && n == i) {
/* 1181 */           n += k;
/*      */ 
/*      */         
/*      */         }
/* 1185 */         else if (i1 == 0) {
/* 1186 */           int i2 = (arrayOfF[b]).b;
/* 1187 */           for (int i3 = i; i3 < i2; i3++) {
/* 1188 */             arrayOfInt1[n++] = arrayOfInt1[i3];
/*      */           }
/*      */         } else {
/*      */           
/* 1192 */           i1 = (arrayOfF[b]).a;
/* 1193 */           boolean bool = arrayOfF[b].c();
/* 1194 */           int i2 = i1 + k - 1;
/* 1195 */           for (byte b1 = 0; b1 < k; b1++) {
/* 1196 */             int i3 = bool ? (i1 + b1) : (i2 - b1);
/*      */             char c1;
/* 1198 */             if (!c.a(c1 = paramc.a[i3]))
/* 1199 */               arrayOfInt1[n++] = i3; 
/*      */           } 
/*      */         } 
/*      */       } 
/*      */     } 
/* 1204 */     if (j == paramc.c) {
/* 1205 */       return arrayOfInt1;
/*      */     }
/* 1207 */     int[] arrayOfInt2 = new int[paramc.c];
/* 1208 */     System.arraycopy(arrayOfInt1, 0, arrayOfInt2, 0, paramc.c);
/* 1209 */     return arrayOfInt2;
/*      */   }
/*      */ }


/* Location:              C:\Program Files (x86)\Steam\steamapps\common\Infinitode 2\infinitode-2.jar!\com\b\a\c\e.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */