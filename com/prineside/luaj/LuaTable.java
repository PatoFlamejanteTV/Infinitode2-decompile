/*      */ package com.prineside.luaj;
/*      */ 
/*      */ import com.esotericsoftware.kryo.Kryo;
/*      */ import com.esotericsoftware.kryo.KryoSerializable;
/*      */ import com.esotericsoftware.kryo.io.Input;
/*      */ import com.esotericsoftware.kryo.io.Output;
/*      */ import com.prineside.tdi2.utils.REGS;
/*      */ import com.prineside.tdi2.utils.logging.TLog;
/*      */ import com.prineside.tdi2.utils.syncchecker.DeepClassComparator;
/*      */ import com.prineside.tdi2.utils.syncchecker.DeepClassComparisonConfig;
/*      */ import com.prineside.tdi2.utils.syncchecker.SyncChecker;
/*      */ import java.lang.ref.WeakReference;
/*      */ import java.util.Vector;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ @REGS
/*      */ public class LuaTable
/*      */   extends LuaValue
/*      */   implements KryoSerializable, Metatable
/*      */ {
/*      */   static {
/*   85 */     TLog.forClass(LuaTable.class);
/*      */   }
/*      */   
/*   88 */   private static final LuaString a = valueOf("n");
/*      */   
/*   90 */   public static final DeepClassComparator<LuaTable> CLASS_COMPARATOR = new DeepClassComparator<LuaTable>() {
/*      */       public Class<LuaTable> forClass() {
/*   92 */         return LuaTable.class;
/*      */       }
/*      */       
/*      */       public void compare(LuaTable param1LuaTable1, LuaTable param1LuaTable2, DeepClassComparisonConfig param1DeepClassComparisonConfig) {
/*   96 */         if (param1LuaTable1.get("_noSyncCheck") == LuaValue.TRUE) {
/*      */           return;
/*      */         }
/*   99 */         LuaValue luaValue = LuaValue.NIL;
/*      */         
/*      */         Varargs varargs;
/*      */         
/*  103 */         while (!(luaValue = (varargs = param1LuaTable1.next(luaValue)).arg1()).isnil()) {
/*      */ 
/*      */           
/*  106 */           varargs = varargs.arg(2);
/*  107 */           param1DeepClassComparisonConfig.addPrefix(new String[] { ".", luaValue.toString() });
/*  108 */           if (luaValue.isuserdata() && !SyncChecker.isSyncShareableObject(luaValue.checkuserdata())) {
/*  109 */             param1DeepClassComparisonConfig.addPrefix(new String[] { "<!!!object may be game session specific, used as a table key!!!>" });
/*      */           }
/*  111 */           SyncChecker.compareObjects(varargs, param1LuaTable2.get(luaValue), param1DeepClassComparisonConfig);
/*  112 */           if (luaValue.isuserdata() && !SyncChecker.isSyncShareableObject(luaValue.checkuserdata())) {
/*  113 */             param1DeepClassComparisonConfig.popPrefix(1);
/*      */           }
/*  115 */           param1DeepClassComparisonConfig.popPrefix(2);
/*      */         } 
/*      */       }
/*      */     };
/*      */   private LuaValue[] b; private Slot[] c; private int d; private Metatable e;
/*      */   private static final Slot[] f;
/*      */   
/*  122 */   static { SyncChecker.CLASS_COMPARATORS.add(CLASS_COMPARATOR);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1542 */     SyncChecker.addSyncShareableObject(f = new Slot[0]); }
/*      */   public void write(Kryo paramKryo, Output paramOutput) { if (get("_noSerialization") == LuaValue.TRUE) { paramOutput.writeBoolean(false); return; }  paramOutput.writeBoolean(true); LuaValue.NILLABLE_SERIALIZER.writeClassAndObject(paramKryo, paramOutput, this.b); paramKryo.writeClassAndObject(paramOutput, this.c); paramOutput.writeInt(this.d); paramKryo.writeClassAndObject(paramOutput, this.e); }
/*      */   public void read(Kryo paramKryo, Input paramInput) { boolean bool; if (bool = paramInput.readBoolean()) { this.b = (LuaValue[])paramKryo.readClassAndObject(paramInput); this.c = (Slot[])paramKryo.readClassAndObject(paramInput); this.d = paramInput.readInt(); this.e = (Metatable)paramKryo.readClassAndObject(paramInput); }  }
/*      */   public LuaTable() { this.b = NOVALS; this.c = f; }
/*      */   public LuaTable(int paramInt1, int paramInt2) { presize(paramInt1, paramInt2); }
/*      */   public LuaTable(LuaValue[] paramArrayOfLuaValue1, LuaValue[] paramArrayOfLuaValue2, Varargs paramVarargs) { byte b1 = (paramArrayOfLuaValue1 != null) ? paramArrayOfLuaValue1.length : 0; byte b2 = (paramArrayOfLuaValue2 != null) ? paramArrayOfLuaValue2.length : 0; byte b3 = (paramVarargs != null) ? paramVarargs.narg() : 0; presize(b2 + b3, b1 >> 1); for (b3 = 0; b3 < b2; b3++) rawset(b3 + 1, paramArrayOfLuaValue2[b3]);  if (paramVarargs != null) { int i; for (b3 = 1, i = paramVarargs.narg(); b3 <= i; b3++) rawset(b2 + b3, paramVarargs.arg(b3));  }  for (b3 = 0; b3 < b1; b3 += 2) { if (!paramArrayOfLuaValue1[b3 + 1].isnil()) rawset(paramArrayOfLuaValue1[b3], paramArrayOfLuaValue1[b3 + 1]);  }  }
/* 1548 */   public LuaTable(Varargs paramVarargs) { this(paramVarargs, 1); } public LuaTable(Varargs paramVarargs, int paramInt) { paramInt--; int i = Math.max(paramVarargs.narg() - paramInt, 0); presize(i, 1); set(a, valueOf(i)); for (byte b = 1; b <= i; b++) set(b, paramVarargs.arg(b + paramInt));  } public final int getHashEntries() { return this.d; } public final int type() { return 5; } public final String typename() { return "table"; } public final boolean istable() { return true; } public final LuaTable checktable() { return this; } public final LuaTable opttable(LuaTable paramLuaTable) { return this; } public final void presize(int paramInt) { if (paramInt > this.b.length) this.b = a(this.b, 1 << a(paramInt));  } public final void presize(int paramInt1, int paramInt2) { if (paramInt2 > 0 && paramInt2 < 2) paramInt2 = 2;  this.b = (paramInt1 > 0) ? new LuaValue[1 << a(paramInt1)] : NOVALS; this.c = (paramInt2 > 0) ? new Slot[1 << a(paramInt2)] : f; this.d = 0; } private static LuaValue[] a(LuaValue[] paramArrayOfLuaValue, int paramInt) { LuaValue[] arrayOfLuaValue = new LuaValue[paramInt]; System.arraycopy(paramArrayOfLuaValue, 0, arrayOfLuaValue, 0, paramArrayOfLuaValue.length); return arrayOfLuaValue; } private int d() { return this.b.length; } private int e() { return this.c.length; } public final LuaValue getmetatable() { return (this.e != null) ? this.e.toLuaValue() : null; } public LuaValue setmetatable(LuaValue paramLuaValue) { boolean bool1 = (this.e != null && this.e.useWeakKeys()) ? true : false; boolean bool2 = (this.e != null && this.e.useWeakValues()) ? true : false; this.e = b(paramLuaValue); if (bool1 != ((this.e != null && this.e.useWeakKeys()) ? true : false) || bool2 != ((this.e != null && this.e.useWeakValues()) ? true : false)) b(0);  return this; } public final LuaValue get(int paramInt) { LuaValue luaValue; if ((luaValue = rawget(paramInt)).isnil() && this.e != null) return c(this, valueOf(paramInt));  return luaValue; } public final LuaValue get(LuaValue paramLuaValue) { LuaValue luaValue; if ((luaValue = rawget(paramLuaValue)).isnil() && this.e != null) return c(this, paramLuaValue);  return luaValue; } protected final LuaValue a() { return metatag(LuaValue.CALL); } public final LuaValue rawget(int paramInt) { LuaValue luaValue; if (paramInt > 0 && paramInt <= this.b.length) return ((luaValue = (LuaValue)((this.e == null) ? this.b[paramInt - 1] : this.e.arrayget(this.b, paramInt - 1))) != null) ? luaValue : NIL;  return c(LuaNumber.valueOf(luaValue)); } public final LuaValue rawget(LuaValue paramLuaValue) { int i; if (paramLuaValue.isinttype() && (i = paramLuaValue.toint()) > 0 && i <= this.b.length) return ((paramLuaValue = (LuaValue)((this.e == null) ? this.b[i - 1] : this.e.arrayget(this.b, i - 1))) != null) ? paramLuaValue : NIL;  return c(paramLuaValue); } private LuaValue c(LuaValue paramLuaValue) { if (this.d > 0) for (Slot slot = this.c[d(paramLuaValue)]; slot != null; slot = slot.rest()) { StrongSlot strongSlot; if ((strongSlot = slot.find(paramLuaValue)) != null) return strongSlot.value();  }   return NIL; } public void set(int paramInt, LuaValue paramLuaValue) { if (this.e == null || !rawget(paramInt).isnil() || !a(this, LuaNumber.valueOf(paramInt), paramLuaValue)) rawset(paramInt, paramLuaValue);  } public final void set(LuaValue paramLuaValue1, LuaValue paramLuaValue2) { if (paramLuaValue1 == null || (!paramLuaValue1.isvalidkey() && !metatag(NEWINDEX).isfunction())) throw new LuaError("value ('" + paramLuaValue1 + "') can not be used as a table index");  if (this.e == null || !rawget(paramLuaValue1).isnil() || !a(this, paramLuaValue1, paramLuaValue2)) rawset(paramLuaValue1, paramLuaValue2);  } public void rawset(int paramInt, LuaValue paramLuaValue) { if (!a(paramInt, paramLuaValue)) hashset(LuaNumber.valueOf(paramInt), paramLuaValue);  } public void rawset(LuaValue paramLuaValue1, LuaValue paramLuaValue2) { if (!paramLuaValue1.isinttype() || !a(paramLuaValue1.toint(), paramLuaValue2)) hashset(paramLuaValue1, paramLuaValue2);  } private boolean a(int paramInt, LuaValue paramLuaValue) { if (paramInt > 0 && paramInt <= this.b.length) { this.b[paramInt - 1] = paramLuaValue.isnil() ? null : ((this.e != null) ? this.e.wrap(paramLuaValue) : paramLuaValue); return true; }  return false; } public LuaValue remove(int paramInt) { int i = length(); if (paramInt == 0) { paramInt = i; } else if (paramInt > i) { return NONE; }  LuaValue luaValue1; for (LuaValue luaValue2 = luaValue1 = get(paramInt); !luaValue2.isnil(); ) { luaValue2 = get(paramInt + 1); set(paramInt++, luaValue2); }  return luaValue1.isnil() ? NONE : luaValue1; } public final void insert(int paramInt, LuaValue paramLuaValue) { if (paramInt == 0) paramInt = length() + 1;  while (!paramLuaValue.isnil()) { LuaValue luaValue = get(paramInt); set(paramInt++, paramLuaValue); paramLuaValue = luaValue; }  } public final LuaValue concat(LuaString paramLuaString, int paramInt1, int paramInt2) { Buffer buffer = new Buffer(); if (paramInt1 <= paramInt2) { buffer.append(get(paramInt1).checkstring()); while (++paramInt1 <= paramInt2) { buffer.append(paramLuaString); buffer.append(get(paramInt1).checkstring()); }  }  return buffer.tostring(); } public final int length() { if (this.e != null) { LuaValue luaValue; if (!(luaValue = len()).isint()) throw new LuaError("table length is not an integer: " + luaValue);  return luaValue.toint(); }  return rawlen(); } public final LuaValue len() { LuaValue luaValue; if ((luaValue = metatag(LEN)).toboolean()) return luaValue.call(this);  return LuaNumber.valueOf(rawlen()); } public boolean useWeakKeys() { return false; } public final int rawlen() { int i, j = (i = d()) + 1, k = 0; while (!rawget(j).isnil()) { k = j; j += i + e() + 1; }  while (j > k + 1) { i = (j + k) / 2; if (!rawget(i).isnil()) { k = i; continue; }  j = i; }  return k; } public final Varargs next(LuaValue paramLuaValue) { int i = 0; if (!paramLuaValue.isnil() && (!paramLuaValue.isinttype() || (i = paramLuaValue.toint()) <= 0 || i > this.b.length)) { if (this.c.length == 0) error("invalid key to 'next' 1: " + paramLuaValue);  i = d(paramLuaValue); boolean bool = false; for (Slot slot = this.c[i]; slot != null; slot = slot.rest()) { if (bool) { StrongSlot strongSlot; if ((strongSlot = slot.first()) != null) return strongSlot.toVarargs();  } else if (slot.keyeq(paramLuaValue)) { bool = true; }  }  if (!bool) error("invalid key to 'next' 2: " + paramLuaValue);  i += 1 + this.b.length; }  for (; i < this.b.length; i++) { if (this.b[i] != null) { LuaValue luaValue; if ((luaValue = (LuaValue)((this.e == null) ? this.b[i] : this.e.arrayget(this.b, i))) != null) return varargsOf(LuaNumber.valueOf(i + 1), luaValue);  }  }  for (i -= this.b.length; i < this.c.length; i++) { Slot slot = this.c[i]; while (slot != null) { StrongSlot strongSlot; if ((strongSlot = slot.first()) != null) return strongSlot.toVarargs();  slot = slot.rest(); }  }  return NIL; } public final Varargs inext(LuaValue paramLuaValue) { int i = paramLuaValue.checkint() + 1; LuaValue luaValue; if ((luaValue = rawget(i)).isnil()) return NONE;  return varargsOf(LuaNumber.valueOf(i), luaValue); } public final void hashset(LuaValue paramLuaValue1, LuaValue paramLuaValue2) { if (paramLuaValue2.isnil()) { e(paramLuaValue1); return; }  int i = 0; if (this.c.length > 0) { i = d(paramLuaValue1); for (Slot slot1 = this.c[i]; slot1 != null; slot1 = slot1.rest()) { StrongSlot strongSlot; if ((strongSlot = slot1.find(paramLuaValue1)) != null) { this.c[i] = this.c[i].set(strongSlot, paramLuaValue2); return; }  }  }  if (f()) { if ((this.e == null || !this.e.useWeakValues()) && paramLuaValue1.isinttype() && paramLuaValue1.toint() > 0) { b(paramLuaValue1.toint()); if (a(paramLuaValue1.toint(), paramLuaValue2)) return;  } else { b(-1); }  i = d(paramLuaValue1); }  Slot slot = (this.e != null) ? this.e.entry(paramLuaValue1, paramLuaValue2) : a(paramLuaValue1, paramLuaValue2); this.c[i] = (this.c[i] != null) ? this.c[i].add(slot) : slot; this.d++; } public static int hashpow2(int paramInt1, int paramInt2) { return paramInt1 & paramInt2; } public static int hashmod(int paramInt1, int paramInt2) { return (paramInt1 & Integer.MAX_VALUE) % paramInt2; } public static int hashSlot(LuaValue paramLuaValue, int paramInt) { switch (paramLuaValue.type()) { case 2: case 3: case 5: case 7: case 8: return hashmod(paramLuaValue.hashCode(), paramInt); }  return hashpow2(paramLuaValue.hashCode(), paramInt); } private int d(LuaValue paramLuaValue) { return hashSlot(paramLuaValue, this.c.length - 1); } private void e(LuaValue paramLuaValue) { if (this.c.length > 0) { int i = d(paramLuaValue); for (Slot slot = this.c[i]; slot != null; slot = slot.rest()) { StrongSlot strongSlot; if ((strongSlot = slot.find(paramLuaValue)) != null) { this.c[i] = this.c[i].remove(strongSlot); this.d--; return; }  }  }  } private boolean f() { return (this.d >= this.c.length); } private int g() { byte b1 = 0; for (byte b2 = 0; b2 < this.c.length; b2++) { for (Slot slot = this.c[b2]; slot != null; slot = slot.rest()) { if (slot.first() != null) b1++;  }  }  return b1; } private void h() { for (byte b = 0; b < this.b.length; b++) this.e.arrayget(this.b, b);  } private int a(int[] paramArrayOfint) { int i = 0; byte b1 = 1; for (byte b2 = 0; b2 < 31 && b1 <= this.b.length; b2++) { int j = Math.min(this.b.length, 1 << b2); byte b = 0; while (b1 <= j) { if (this.b[b1++ - 1] != null) b++;  }  paramArrayOfint[b2] = b; i += b; }  for (b1 = 0; b1 < this.c.length; b1++) { for (Slot slot = this.c[b1]; slot != null; slot = slot.rest()) { int j; if ((j = slot.arraykey(2147483647)) > 0) { paramArrayOfint[a(j)] = paramArrayOfint[a(j)] + 1; i++; }  }  }  return i; } private static int a(int paramInt) { byte b = 0; paramInt--; if (paramInt < 0) return Integer.MIN_VALUE;  if ((paramInt & 0xFFFF0000) != 0) { b = 16; paramInt >>>= 16; }  if ((paramInt & 0xFF00) != 0) { b += 8; paramInt >>>= 8; }  if ((paramInt & 0xF0) != 0) { b += 4; paramInt >>>= 4; }  switch (paramInt) { case 0: return 0;case 1: b++; break;case 2: case 3: b += 2; break;case 4: case 5: case 6: case 7: b += 3; break;case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: b += 4; break; }  return b; } private void b(int paramInt) { Slot[] arrayOfSlot1; boolean bool; LuaValue[] arrayOfLuaValue1; if (this.e != null && (this.e.useWeakKeys() || this.e.useWeakValues())) { this.d = g(); if (this.e.useWeakValues()) h();  }  int[] arrayOfInt = new int[32]; int i = a(arrayOfInt); if (paramInt > 0) { i++; arrayOfInt[a(paramInt)] = arrayOfInt[a(paramInt)] + 1; }  int j = arrayOfInt[0]; int k = 0; for (byte b = 1; b < 32; ) { j += arrayOfInt[b]; if (i << 1 >= 1 << b) { if (j >= 1 << b - 1) k = 1 << b;  b++; }  }  LuaValue[] arrayOfLuaValue2 = this.b; Slot[] arrayOfSlot2 = this.c; int m = 0; if (paramInt > 0 && paramInt <= k) m--;  if (k != arrayOfLuaValue2.length) { arrayOfLuaValue1 = new LuaValue[k]; if (k > arrayOfLuaValue2.length) { for (int i2 = a(arrayOfLuaValue2.length + 1), i3 = a(k) + 1; i2 < i3; i2++) m += arrayOfInt[i2];  } else if (arrayOfLuaValue2.length > k) { for (int i2 = a(k + 1), i3 = a(arrayOfLuaValue2.length) + 1; i2 < i3; i2++) m -= arrayOfInt[i2];  }  System.arraycopy(arrayOfLuaValue2, 0, arrayOfLuaValue1, 0, Math.min(arrayOfLuaValue2.length, k)); } else { arrayOfLuaValue1 = this.b; }  int n = this.d - m + ((paramInt < 0 || paramInt > k) ? 1 : 0); int i1 = arrayOfSlot2.length; if (n > 0) { bool = (paramInt = (n < 2) ? 2 : (1 << a(n))) - 1; arrayOfSlot1 = new Slot[paramInt]; } else { bool = false; arrayOfSlot1 = f; }  for (n = 0; n < i1; n++) { for (Slot slot = arrayOfSlot2[n]; slot != null; slot = slot.rest()) { int i2; if ((i2 = slot.arraykey(k)) > 0) { StrongSlot strongSlot; if ((strongSlot = slot.first()) != null) arrayOfLuaValue1[i2 - 1] = strongSlot.value();  } else if (!(slot instanceof DeadSlot)) { int i3 = slot.keyindex(bool); arrayOfSlot1[i3] = slot.relink(arrayOfSlot1[i3]); }  }  }  for (n = k; n < arrayOfLuaValue2.length;) { if ((luaValue = arrayOfLuaValue2[n++]) != null) { Slot slot; int i2 = hashmod(LuaNumber.hashCode(n), bool); if (this.e != null) { if ((slot = this.e.entry(valueOf(n), luaValue)) == null) continue;  } else { slot = a(valueOf(n), luaValue); }  arrayOfSlot1[i2] = (arrayOfSlot1[i2] != null) ? arrayOfSlot1[i2].add(slot) : slot; }  }  this.c = arrayOfSlot1; this.b = arrayOfLuaValue1; this.d -= m; } public final Slot entry(LuaValue paramLuaValue1, LuaValue paramLuaValue2) { return a(paramLuaValue1, paramLuaValue2); } protected static boolean a(LuaValue paramLuaValue) { switch (paramLuaValue.type()) { case 4: return (paramLuaValue.rawlen() > 64);case 1: case 3: return false; }  return true; } protected static Entry a(LuaValue paramLuaValue1, LuaValue paramLuaValue2) { if (paramLuaValue1.isinttype()) return new IntKeyEntry(paramLuaValue1.toint(), paramLuaValue2);  if (paramLuaValue2.type() == 3) return new NumberValueEntry(paramLuaValue1, paramLuaValue2.todouble());  return new NormalEntry(paramLuaValue1, paramLuaValue2); } public final void sort(LuaValue paramLuaValue) { if (len().tolong() >= 2147483647L) throw new LuaError("array too big: " + len().tolong());  if (this.e != null && this.e.useWeakValues()) h();  int i; if ((i = length()) > 1) b(i, paramLuaValue.isnil() ? null : paramLuaValue);  } private void b(int paramInt, LuaValue paramLuaValue) { c(paramInt, paramLuaValue); for (paramInt = paramInt; paramInt > 1; ) { LuaValue luaValue = get(paramInt); set(paramInt, get(1)); set(1, luaValue); a(1, --paramInt, paramLuaValue); }  } private void c(int paramInt, LuaValue paramLuaValue) { for (int i = paramInt / 2; i > 0; i--) a(i, paramInt, paramLuaValue);  } private void a(int paramInt1, int paramInt2, LuaValue paramLuaValue) { for (paramInt1 = paramInt1; paramInt1 << 1 <= paramInt2; ) { int i; if ((i = paramInt1 << 1) < paramInt2 && b(i, i + 1, paramLuaValue)) i++;  if (b(paramInt1, i, paramLuaValue)) { LuaValue luaValue = get(paramInt1); set(paramInt1, get(i)); set(i, luaValue); paramInt1 = i; continue; }  return; }  } private boolean b(int paramInt1, int paramInt2, LuaValue paramLuaValue) { LuaValue luaValue1 = get(paramInt1), luaValue2 = get(paramInt2); if (luaValue1 == null || luaValue2 == null) return false;  if (paramLuaValue != null) return paramLuaValue.call(luaValue1, luaValue2).toboolean();  return luaValue1.lt_b(luaValue2); } public final int keyCount() { LuaValue luaValue = LuaValue.NIL; for (byte b = 0;; b++) { Varargs varargs; if ((varargs = (varargs = next(luaValue)).arg1()).isnil()) return b;  }  } public final LuaValue[] keys() { Vector<Varargs> vector = new Vector(); LuaValue luaValue = LuaValue.NIL; Varargs varargs; while (!(varargs = (varargs = next(luaValue)).arg1()).isnil()) vector.addElement(varargs);  LuaValue[] arrayOfLuaValue = new LuaValue[vector.size()]; vector.copyInto((Object[])arrayOfLuaValue); return arrayOfLuaValue; } public final LuaValue eq(LuaValue paramLuaValue) { return eq_b(paramLuaValue) ? TRUE : FALSE; } public final boolean eq_b(LuaValue paramLuaValue) { if (this == paramLuaValue) return true;  if (this.e == null || !paramLuaValue.istable()) return false;  LuaValue luaValue; if ((luaValue = paramLuaValue.getmetatable()) != null && LuaValue.eqmtcall(this, this.e.toLuaValue(), paramLuaValue, luaValue)) return true;  return false; } public final Varargs unpack() { return unpack(1, rawlen()); } public final Varargs unpack(int paramInt) { return unpack(paramInt, rawlen()); } public final Varargs unpack(int paramInt1, int paramInt2) { if (paramInt2 < paramInt1) return NONE;  int i; if ((i = paramInt2 - paramInt1) < 0) throw new LuaError("too many results to unpack: greater 2147483647");  if (i >= 16777215) throw new LuaError("too many results to unpack: " + i + " (max is 16777215" + ')');  switch (paramInt2 = paramInt2 + 1 - paramInt1) { case 0: return NONE;case 1: return get(paramInt1);case 2: return varargsOf(get(paramInt1), get(paramInt1 + 1)); }  if (paramInt2 < 0) return NONE;  try { LuaValue[] arrayOfLuaValue = new LuaValue[paramInt2]; while (--paramInt2 >= 0) arrayOfLuaValue[paramInt2] = get(paramInt1 + paramInt2);  return varargsOf(arrayOfLuaValue); } catch (OutOfMemoryError outOfMemoryError) { throw new LuaError("too many results to unpack [out of memory]: " + paramInt2); }  } @REGS public static final class LinkSlot implements KryoSerializable, StrongSlot {
/*      */     private LuaTable.Entry a; private LuaTable.Slot b; public final void write(Kryo param1Kryo, Output param1Output) { param1Kryo.writeClassAndObject(param1Output, this.a); param1Kryo.writeClassAndObject(param1Output, this.b); } public final void read(Kryo param1Kryo, Input param1Input) { this.a = (LuaTable.Entry)param1Kryo.readClassAndObject(param1Input); this.b = (LuaTable.Slot)param1Kryo.readClassAndObject(param1Input); } LinkSlot() {} LinkSlot(LuaTable.Entry param1Entry, LuaTable.Slot param1Slot) { this.a = param1Entry; this.b = param1Slot; } public final LuaValue key() { return this.a.key(); } public final int keyindex(int param1Int) { return this.a.keyindex(param1Int); } public final LuaValue value() { return this.a.value(); } public final Varargs toVarargs() { return this.a.toVarargs(); } public final LuaTable.StrongSlot first() { return this.a; } public final LuaTable.StrongSlot find(LuaValue param1LuaValue) { return this.a.keyeq(param1LuaValue) ? this : null; } public final boolean keyeq(LuaValue param1LuaValue) { return this.a.keyeq(param1LuaValue); } public final LuaTable.Slot rest() { return this.b; } public final int arraykey(int param1Int) { return this.a.arraykey(param1Int); } public final LuaTable.Slot set(LuaTable.StrongSlot param1StrongSlot, LuaValue param1LuaValue) { if (param1StrongSlot == this) { this.a = this.a.set(param1LuaValue); return this; }  return a(this.b.set(param1StrongSlot, param1LuaValue)); } public final LuaTable.Slot add(LuaTable.Slot param1Slot) { return a(this.b.add(param1Slot)); } public final LuaTable.Slot remove(LuaTable.StrongSlot param1StrongSlot) { if (this == param1StrongSlot) return new LuaTable.DeadSlot(key(), this.b, (byte)0);  this.b = this.b.remove(param1StrongSlot); return this; } public final LuaTable.Slot relink(LuaTable.Slot param1Slot) { return (LuaTable.Slot)((param1Slot != null) ? new LinkSlot(this.a, param1Slot) : this.a); } private LuaTable.Slot a(LuaTable.Slot param1Slot) { if (param1Slot != null) { this.b = param1Slot; return this; }  return this.a; } public final String toString() { return this.a + "; " + this.b; } } static abstract class Entry extends Varargs implements StrongSlot {
/*      */     public abstract LuaValue key(); public abstract LuaValue value(); abstract Entry set(LuaValue param1LuaValue); public abstract boolean keyeq(LuaValue param1LuaValue); public abstract int keyindex(int param1Int); public int arraykey(int param1Int) { return 0; } public final LuaValue arg(int param1Int) { switch (param1Int) { case 1: return key();case 2: return value(); }  return LuaValue.NIL; } public final int narg() { return 2; } public Varargs toVarargs() { return LuaValue.varargsOf(key(), value()); } public final LuaValue arg1() { return key(); } public final Varargs subargs(int param1Int) { switch (param1Int) { case 1: return this;case 2: return value(); }  return LuaValue.NONE; } public final LuaTable.StrongSlot first() { return this; } public final LuaTable.Slot rest() { return null; } public final LuaTable.StrongSlot find(LuaValue param1LuaValue) { return keyeq(param1LuaValue) ? this : null; } public final LuaTable.Slot set(LuaTable.StrongSlot param1StrongSlot, LuaValue param1LuaValue) { return set(param1LuaValue); } public final LuaTable.Slot add(LuaTable.Slot param1Slot) { return new LuaTable.LinkSlot(this, param1Slot); } public final LuaTable.Slot remove(LuaTable.StrongSlot param1StrongSlot) { return new LuaTable.DeadSlot(key(), null, (byte)0); } public final LuaTable.Slot relink(LuaTable.Slot param1Slot) { return (LuaTable.Slot)((param1Slot != null) ? new LuaTable.LinkSlot(this, param1Slot) : this); } } @REGS(serializer = NormalEntry.Serializer.class) public static final class NormalEntry extends Entry {
/*      */     private final LuaValue a; private LuaValue b; public static class Serializer extends com.esotericsoftware.kryo.Serializer<NormalEntry> {
/* 1552 */       public void write(Kryo param2Kryo, Output param2Output, LuaTable.NormalEntry param2NormalEntry) { LuaValue.NILLABLE_SERIALIZER.writeClassAndObject(param2Kryo, param2Output, LuaTable.NormalEntry.a(param2NormalEntry)); LuaValue.NILLABLE_SERIALIZER.writeClassAndObject(param2Kryo, param2Output, LuaTable.NormalEntry.b(param2NormalEntry)); } public LuaTable.NormalEntry read(Kryo param2Kryo, Input param2Input, Class<? extends LuaTable.NormalEntry> param2Class) { LuaValue luaValue2 = (LuaValue)param2Kryo.readClassAndObject(param2Input); LuaValue luaValue1 = (LuaValue)param2Kryo.readClassAndObject(param2Input); return new LuaTable.NormalEntry(luaValue2, luaValue1); } } NormalEntry(LuaValue param1LuaValue1, LuaValue param1LuaValue2) { this.a = param1LuaValue1; this.b = param1LuaValue2; } public final LuaValue key() { return this.a; } public final LuaValue value() { return this.b; } public final LuaTable.Entry set(LuaValue param1LuaValue) { this.b = param1LuaValue; return this; } public final Varargs toVarargs() { return this; } public final int keyindex(int param1Int) { return LuaTable.hashSlot(this.a, param1Int); } public final boolean keyeq(LuaValue param1LuaValue) { return param1LuaValue.raweq(this.a); } } @REGS(serializer = IntKeyEntry.Serializer.class) public static final class IntKeyEntry extends Entry { private final int a; private LuaValue b; public static class Serializer extends com.esotericsoftware.kryo.Serializer<IntKeyEntry> { public void write(Kryo param2Kryo, Output param2Output, LuaTable.IntKeyEntry param2IntKeyEntry) { param2Output.writeVarInt(LuaTable.IntKeyEntry.a(param2IntKeyEntry), false); LuaValue.NILLABLE_SERIALIZER.writeClassAndObject(param2Kryo, param2Output, LuaTable.IntKeyEntry.b(param2IntKeyEntry)); } public LuaTable.IntKeyEntry read(Kryo param2Kryo, Input param2Input, Class<? extends LuaTable.IntKeyEntry> param2Class) { int i = param2Input.readVarInt(false); LuaValue luaValue = (LuaValue)param2Kryo.readClassAndObject(param2Input); return new LuaTable.IntKeyEntry(i, luaValue); } } IntKeyEntry(int param1Int, LuaValue param1LuaValue) { this.a = param1Int; this.b = param1LuaValue; } public final LuaValue key() { return LuaValue.valueOf(this.a); } public final int arraykey(int param1Int) { return (this.a > 0 && this.a <= param1Int) ? this.a : 0; } public final LuaValue value() { return this.b; } public final LuaTable.Entry set(LuaValue param1LuaValue) { this.b = param1LuaValue; return this; } public final int keyindex(int param1Int) { return LuaTable.hashmod(LuaNumber.hashCode(this.a), param1Int); } public final boolean keyeq(LuaValue param1LuaValue) { return param1LuaValue.raweq(this.a); } } @REGS(serializer = NumberValueEntry.Serializer.class) public static final class NumberValueEntry extends Entry { private final LuaNumber a = LuaValue.valueOf(123.45D); private final LuaValue b; public static class Serializer extends com.esotericsoftware.kryo.Serializer<NumberValueEntry> { public void write(Kryo param2Kryo, Output param2Output, LuaTable.NumberValueEntry param2NumberValueEntry) { param2Output.writeDouble((LuaTable.NumberValueEntry.a(param2NumberValueEntry)).a); LuaValue.NILLABLE_SERIALIZER.writeClassAndObject(param2Kryo, param2Output, LuaTable.NumberValueEntry.b(param2NumberValueEntry)); } public LuaTable.NumberValueEntry read(Kryo param2Kryo, Input param2Input, Class<? extends LuaTable.NumberValueEntry> param2Class) { double d = param2Input.readDouble(); LuaValue luaValue = (LuaValue)param2Kryo.readClassAndObject(param2Input); return new LuaTable.NumberValueEntry(luaValue, d); } } NumberValueEntry(LuaValue param1LuaValue, double param1Double) { this.b = param1LuaValue; this.a.a = param1Double; } public final LuaValue key() { return this.b; } public final LuaValue value() { return this.a; } public final LuaTable.Entry set(LuaValue param1LuaValue) { LuaValue luaValue; if (param1LuaValue.type() == 3 && !(luaValue = param1LuaValue.tonumber()).isnil()) { this.a.a = luaValue.todouble(); return this; }  return new LuaTable.NormalEntry(this.b, param1LuaValue); } public final int keyindex(int param1Int) { return LuaTable.hashSlot(this.b, param1Int); } public final boolean keyeq(LuaValue param1LuaValue) { return param1LuaValue.raweq(this.b); } } @REGS public static final class DeadSlot implements KryoSerializable, Slot { private Object a; private LuaTable.Slot b; public final void write(Kryo param1Kryo, Output param1Output) { param1Kryo.writeClassAndObject(param1Output, this.a); param1Kryo.writeClassAndObject(param1Output, this.b); } public final void read(Kryo param1Kryo, Input param1Input) { this.a = param1Kryo.readClassAndObject(param1Input); this.b = (LuaTable.Slot)param1Kryo.readClassAndObject(param1Input); } private DeadSlot() {} private DeadSlot(LuaValue param1LuaValue, LuaTable.Slot param1Slot) { this.a = LuaTable.a(param1LuaValue) ? new WeakReference<>(param1LuaValue) : param1LuaValue; this.b = param1Slot; } private LuaValue a() { return (this.a instanceof WeakReference) ? ((WeakReference<LuaValue>)this.a).get() : (LuaValue)this.a; } public final int keyindex(int param1Int) { return 0; } public final LuaTable.StrongSlot first() { return null; } public final LuaTable.StrongSlot find(LuaValue param1LuaValue) { return null; } public final boolean keyeq(LuaValue param1LuaValue) { LuaValue luaValue; if ((luaValue = a()) != null && param1LuaValue.raweq(luaValue)) return true;  return false; } public final LuaTable.Slot rest() { return this.b; } public final int arraykey(int param1Int) { return -1; } public final LuaTable.Slot set(LuaTable.StrongSlot param1StrongSlot, LuaValue param1LuaValue) { LuaTable.Slot slot = (this.b != null) ? this.b.set(param1StrongSlot, param1LuaValue) : null; if (a() != null) { this.b = slot; return this; }  return slot; } public final LuaTable.Slot add(LuaTable.Slot param1Slot) { return (this.b != null) ? this.b.add(param1Slot) : param1Slot; } public final LuaTable.Slot remove(LuaTable.StrongSlot param1StrongSlot) { if (a() != null) { this.b = this.b.remove(param1StrongSlot); return this; }  return this.b; } public final LuaTable.Slot relink(LuaTable.Slot param1Slot) { return param1Slot; } public final String toString() { StringBuffer stringBuffer; (stringBuffer = new StringBuffer()).append("<dead"); LuaValue luaValue; if ((luaValue = a()) != null) { stringBuffer.append(": "); stringBuffer.append(luaValue.toString()); }  stringBuffer.append('>'); if (this.b != null) { stringBuffer.append("; "); stringBuffer.append(this.b.toString()); }  return stringBuffer.toString(); } } public boolean useWeakValues() { return false; }
/*      */ 
/*      */   
/*      */   public LuaValue toLuaValue() {
/* 1556 */     return this;
/*      */   }
/*      */   
/*      */   public LuaValue wrap(LuaValue paramLuaValue) {
/* 1560 */     return paramLuaValue;
/*      */   }
/*      */   
/*      */   public LuaValue arrayget(LuaValue[] paramArrayOfLuaValue, int paramInt) {
/* 1564 */     return paramArrayOfLuaValue[paramInt];
/*      */   }
/*      */   
/*      */   @REGS(arrayLevels = 1, classOnly = true)
/*      */   public static interface Slot {
/*      */     int keyindex(int param1Int);
/*      */     
/*      */     LuaTable.StrongSlot first();
/*      */     
/*      */     LuaTable.StrongSlot find(LuaValue param1LuaValue);
/*      */     
/*      */     boolean keyeq(LuaValue param1LuaValue);
/*      */     
/*      */     Slot rest();
/*      */     
/*      */     int arraykey(int param1Int);
/*      */     
/*      */     Slot set(LuaTable.StrongSlot param1StrongSlot, LuaValue param1LuaValue);
/*      */     
/*      */     Slot add(Slot param1Slot);
/*      */     
/*      */     Slot remove(LuaTable.StrongSlot param1StrongSlot);
/*      */     
/*      */     Slot relink(Slot param1Slot);
/*      */   }
/*      */   
/*      */   static interface StrongSlot extends Slot {
/*      */     LuaValue key();
/*      */     
/*      */     LuaValue value();
/*      */     
/*      */     Varargs toVarargs();
/*      */   }
/*      */ }


/* Location:              C:\Program Files (x86)\Steam\steamapps\common\Infinitode 2\infinitode-2.jar!\com\prineside\luaj\LuaTable.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */