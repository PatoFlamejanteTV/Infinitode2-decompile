/*      */ package org.b.a.a;
/*      */ import org.b.a.d;
/*      */ 
/*      */ public class c implements b {
/*      */   public static boolean a(char paramChar) {
/*    6 */     return ((paramChar >= 'A' && paramChar <= 'Z') || (paramChar >= 'a' && paramChar <= 'z'));
/*      */   }
/*      */   private final boolean a;
/*      */   public static boolean b(char paramChar) {
/*   10 */     return (paramChar >= '0' && paramChar <= '9');
/*      */   }
/*      */   
/*      */   public static boolean c(char paramChar) {
/*   14 */     return (a(paramChar) || b(paramChar));
/*      */   }
/*      */   
/*      */   public static boolean d(char paramChar) {
/*   18 */     return (paramChar >= '');
/*      */   }
/*      */   
/*      */   public static int a(CharSequence paramCharSequence, int paramInt) {
/*   22 */     byte b1 = 0;
/*   23 */     byte b2 = 0;
/*   24 */     byte b3 = 0;
/*   25 */     boolean bool1 = false;
/*   26 */     boolean bool2 = false;
/*   27 */     int i = paramInt;
/*      */     
/*   29 */     for (paramInt = paramInt; paramInt < paramCharSequence.length(); paramInt++) {
/*      */       char c1;
/*   31 */       switch (c1 = paramCharSequence.charAt(paramInt)) {
/*      */         case '\000':
/*      */         case '\001':
/*      */         case '\002':
/*      */         case '\003':
/*      */         case '\004':
/*      */         case '\005':
/*      */         case '\006':
/*      */         case '\007':
/*      */         case '\b':
/*      */         case '\t':
/*      */         case '\n':
/*      */         case '\013':
/*      */         case '\f':
/*      */         case '\r':
/*      */         case '\016':
/*      */         case '\017':
/*      */         case '\020':
/*      */         case '\021':
/*      */         case '\022':
/*      */         case '\023':
/*      */         case '\024':
/*      */         case '\025':
/*      */         case '\026':
/*      */         case '\027':
/*      */         case '\030':
/*      */         case '\031':
/*      */         case '\032':
/*      */         case '\033':
/*      */         case '\034':
/*      */         case '\035':
/*      */         case '\036':
/*      */         case '\037':
/*      */         case ' ':
/*      */         case '<':
/*      */         case '>':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */         case '':
/*      */           break;
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*      */         case '!':
/*      */         case ',':
/*      */         case '.':
/*      */         case ':':
/*      */         case ';':
/*      */         case '?':
/*      */           break;
/*      */ 
/*      */ 
/*      */         
/*      */         case '/':
/*      */         
/*      */ 
/*      */ 
/*      */         
/*      */         case '(':
/*  121 */           b1++;
/*      */           break;
/*      */         case ')':
/*  124 */           b1--;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*      */         case '[':
/*  134 */           b2++;
/*      */           break;
/*      */         
/*      */         case ']':
/*  138 */           b2--;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*      */         case '{':
/*  147 */           b3++;
/*      */           break;
/*      */         case '}':
/*  150 */           b3--;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*      */         case '"':
/*      */         
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*      */         case '\'':
/*      */         
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*      */         default:
/*  171 */           i = paramInt; break;
/*      */       }  continue;
/*      */     } 
/*  174 */     return i;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public c(boolean paramBoolean) {
/* 1016 */     this.a = paramBoolean;
/*      */   }
/*      */ 
/*      */   
/*      */   public org.b.a.c a(CharSequence paramCharSequence, int paramInt1, int paramInt2) {
/* 1021 */     int j = paramInt1 - 1;
/*      */     
/* 1023 */     if ((paramInt2 = b(paramCharSequence, j, paramInt2)) == -1) {
/* 1024 */       return null;
/*      */     }
/*      */     
/* 1027 */     paramInt1++;
/*      */     int i;
/* 1029 */     if ((i = b(paramCharSequence, paramInt1)) == -1) {
/* 1030 */       return null;
/*      */     }
/*      */     
/* 1033 */     return new a(d.b, paramInt2, i + 1);
/*      */   }
/*      */ 
/*      */   
/*      */   private int b(CharSequence paramCharSequence, int paramInt1, int paramInt2) {
/* 1038 */     int i = -1;
/* 1039 */     boolean bool = true;
/* 1040 */     for (paramInt1 = paramInt1; paramInt1 >= paramInt2; paramInt1--) {
/*      */       char c1;
/* 1042 */       if (e(c1 = paramCharSequence.charAt(paramInt1))) {
/* 1043 */         i = paramInt1;
/* 1044 */         bool = false;
/* 1045 */       } else if (c1 == '.' && 
/* 1046 */         !bool) {
/*      */ 
/*      */         
/* 1049 */         bool = true;
/*      */       } else {
/*      */         break;
/*      */       } 
/*      */     } 
/* 1054 */     return i;
/*      */   }
/*      */ 
/*      */   
/*      */   private int b(CharSequence paramCharSequence, int paramInt) {
/* 1059 */     boolean bool1 = true;
/* 1060 */     boolean bool2 = false;
/* 1061 */     int i = -1;
/* 1062 */     int j = -1;
/* 1063 */     for (paramInt = paramInt; paramInt < paramCharSequence.length(); paramInt++) {
/* 1064 */       char c1 = paramCharSequence.charAt(paramInt);
/* 1065 */       if (bool1) {
/* 1066 */         if (f(c1)) {
/* 1067 */           j = paramInt;
/* 1068 */           bool1 = false;
/* 1069 */           bool2 = true;
/*      */         } else {
/*      */           
/*      */           break;
/*      */         } 
/* 1074 */       } else if (c1 == '.') {
/* 1075 */         if (bool2)
/*      */         
/*      */         { 
/* 1078 */           bool1 = true;
/* 1079 */           if (i == -1)
/* 1080 */             i = paramInt;  } else { break; }
/*      */       
/* 1082 */       } else if (c1 == '-') {
/* 1083 */         bool2 = false;
/* 1084 */       } else if (f(c1)) {
/* 1085 */         j = paramInt;
/* 1086 */         bool2 = true;
/*      */       } else {
/*      */         break;
/*      */       } 
/*      */     } 
/*      */     
/* 1092 */     if (this.a && (i == -1 || i > j)) {
/* 1093 */       return -1;
/*      */     }
/* 1095 */     return j;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private static boolean e(char paramChar) {
/* 1101 */     if (c(paramChar) || d(paramChar)) {
/* 1102 */       return true;
/*      */     }
/* 1104 */     switch (paramChar) {
/*      */       case '!':
/*      */       case '#':
/*      */       case '$':
/*      */       case '%':
/*      */       case '&':
/*      */       case '\'':
/*      */       case '*':
/*      */       case '+':
/*      */       case '-':
/*      */       case '/':
/*      */       case '=':
/*      */       case '?':
/*      */       case '^':
/*      */       case '_':
/*      */       case '`':
/*      */       case '{':
/*      */       case '|':
/*      */       case '}':
/*      */       case '~':
/* 1124 */         return true;
/*      */     } 
/* 1126 */     return false;
/*      */   }
/*      */ 
/*      */   
/*      */   private static boolean f(char paramChar) {
/* 1131 */     return (c(paramChar) || d(paramChar));
/*      */   }
/*      */ }


/* Location:              C:\Program Files (x86)\Steam\steamapps\common\Infinitode 2\infinitode-2.jar!\org\b\a\a\c.class
 * Java compiler version: 7 (51.0)
 * JD-Core Version:       1.1.3
 */